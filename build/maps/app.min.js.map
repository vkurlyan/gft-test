{"version":3,"sources":["require.js","classes/Observer.js","classes/Collection.js","views/ListItem.js","views/List.js","models/List.js","views/ListPage.js","app.min.js","controllers/List.js","App.js","main.js"],"names":["requirejs","require","define","global","isFunction","it","ostring","call","isArray","each","ary","func","i","length","eachReverse","hasProp","obj","prop","hasOwn","getOwn","eachProp","mixin","target","source","force","deepStringMixin","value","RegExp","bind","fn","apply","arguments","scripts","document","getElementsByTagName","defaultOnError","err","getGlobal","g","split","part","makeError","id","msg","requireModules","e","Error","requireType","originalError","newContext","contextName","trimDots","splice","normalize","name","baseName","applyMap","pkgMain","mapValue","nameParts","j","nameSegment","lastIndex","foundMap","foundI","foundStarMap","starI","normalizedBaseParts","baseParts","map","config","starMap","nodeIdCompat","jsSuffixRegExp","test","replace","charAt","slice","concat","join","outerLoop","pkgs","removeScript","isBrowser","scriptNode","getAttribute","context","parentNode","removeChild","hasPathFallback","pathConfig","paths","shift","undef","makeRequire","skipMap","splitPrefix","prefix","index","indexOf","substring","makeModuleMap","parentModuleMap","isNormalized","url","pluginModule","suffix","parentName","originalName","isDefine","normalizedName","requireCounter","defined","nameToUrl","unnormalizedCounter","parentMap","unnormalized","getModule","depMap","mod","registry","Module","on","defineEmitComplete","error","onError","errback","ids","notified","events","emit","req","takeGlobalQueue","globalDefQueue","apsp","defQueue","cleanRegistry","enabledRegistry","breakCycle","traced","processed","depMaps","depId","dep","depMatched","defineDep","check","checkLoaded","usingPathFallback","waitInterval","waitSeconds","expired","startTime","Date","getTime","noLoads","reqCalls","stillLoading","needCycleCheck","inCheckLoaded","modId","enabled","push","inited","fetched","isWebWorker","checkLoadedTimeoutId","setTimeout","callGetModule","args","init","removeListener","node","ieName","detachEvent","isOpera","removeEventListener","getScriptData","evt","currentTarget","srcElement","onScriptLoad","onScriptError","intakeDefines","handlers","baseUrl","bundles","shim","undefEvents","urlFetched","bundlesMap","exports","usingExports","module","uri","this","depExports","pluginMaps","depCount","prototype","factory","options","ignore","enable","fetch","enableBuildCallback","deps","callPlugin","load","enabling","cjsModule","defining","execCb","undefined","requireMap","onResourceLoad","defineEmitted","pluginMap","plugin","normalizedMap","normalizedMod","bundleId","localRequire","fromText","text","textAlt","moduleName","moduleMap","hasInteractive","useInteractive","exec","completeLoad","handler","undefed","cb","cbs","nextTick","configure","cfg","objs","v","exportsFn","makeShimExports","packages","pkgObj","location","main","currDirRegExp","callback","ret","relMap","requireMod","__requireJsBuild","get","toUrl","moduleNamePlusExt","ext","lastIndexOf","segment","isRelative","specified","found","shExports","enforceDefine","skipExt","syms","parentModule","parentPath","jsExtRegExp","match","urlArgs","type","readyRegExp","readyState","interactiveScript","data","getInteractiveScript","script","s","head","baseElement","dataMain","src","currentlyAddingScript","mainScript","subPath","version","commentRegExp","cjsRequireRegExp","op","Object","toString","hasOwnProperty","ap","Array","window","navigator","importScripts","platform","defContextName","opera","contexts","optional","ctx","createNode","xhtml","createElementNS","createElement","scriptType","charset","async","onNodeCreated","setAttribute","attachEvent","addEventListener","insertBefore","appendChild","skipDataMain","pop","amd","jQuery","eval","Observer","subscribers","eventName","callBack","trigger","forEach","Collection","constructor","collection","model","remove","create","add","modelIndex","ListItemView","el","render","innerHTML","querySelector","listItem","ListView","listCollection","addNewItem","listItemView","List","ListModel","ListPageView","getElementById","elementlistLength","collectionChanged","elementNewItemText","addListItem","listView","textContent","preventDefault","execute","listController","App"],"mappings":"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","file":"app.min.js","sourcesContent":["/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.1.19 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/requirejs for details\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.1.19',\n        commentRegExp = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        ap = Array.prototype,\n        apsp = ap.splice,\n        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value === 'object' && value &&\n                        !isArray(value) && !isFunction(value) &&\n                        !(value instanceof RegExp)) {\n\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    function defaultOnError(err) {\n        throw err;\n    }\n\n    //Allow getting a global that is expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttp://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite an existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                bundles: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n            //registry of just enabled modules, to speed\n            //cycle breaking code when lots of modules\n            //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            bundlesMap = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; i < ary.length; i++) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,\n                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,\n                baseParts = (baseName && baseName.split('/')),\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // If wanting node ID compatibility, strip .js from end\n                // of IDs. Have to do this here, and not in nameToUrl\n                // because node allows either .js or non .js to map\n                // to same file.\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                // Starts with a '.' so need the baseName\n                if (name[0].charAt(0) === '.' && baseParts) {\n                    //Convert baseName to array, and lop off the last part,\n                    //so that . matches that 'directory' and not name of the baseName's\n                    //module. For instance, baseName of 'one/two/three', maps to\n                    //'one/two/three.js', but we want the directory, 'one/two' for\n                    //this normalization.\n                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    name = normalizedBaseParts.concat(name);\n                }\n\n                trimDots(name);\n                name = name.join('/');\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break outerLoop;\n                                }\n                            }\n                        }\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            // If the name points to a package's name, use\n            // the package main instead.\n            pkgMain = getOwn(config.pkgs, name);\n\n            return pkgMain ? pkgMain : name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n\n                //Custom require that does not do map translation, since\n                //ID is \"absolute\", already mapped/resolved.\n                context.makeRequire(null, {\n                    skipMap: true\n                })([id]);\n\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        // If nested plugin references, then do not try to\n                        // normalize, as it will not normalize correctly. This\n                        // places a restriction on resourceIds, and the longer\n                        // term solution is not to normalize until plugins are\n                        // loaded and all normalizations to allow for async\n                        // loading of a loader plugin. But for now, fixes the\n                        // common uses. Details in #1131\n                        normalizedName = name.indexOf('!') === -1 ?\n                                         normalize(name, parentName, applyMap) :\n                                         name;\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                mod = getModule(depMap);\n                if (mod.error && name === 'error') {\n                    fn(mod.error);\n                } else {\n                    mod.on(name, fn);\n                }\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                //Array splice in the values since the context code has a\n                //local var ref to defQueue, so cannot just reassign the one\n                //on context.\n                apsp.apply(defQueue,\n                           [defQueue.length, 0].concat(globalDefQueue));\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return (defined[mod.map.id] = mod.exports);\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return getOwn(config.config, mod.map.id) || {};\n                        },\n                        exports: mod.exports || (mod.exports = {})\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                var map = mod.map,\n                    modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    this.fetch();\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error. However,\n                            //only do it for define()'d  modules. require\n                            //errbacks should not be called for failures in\n                            //their callbacks (#699). However if a global\n                            //onError is set, use that.\n                            if ((this.events.error && this.map.isDefine) ||\n                                req.onError !== defaultOnError) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            // Favor return value over exports. If node/cjs in play,\n                            // then will not have a return value anyway. Favor\n                            // module.exports assignment over exports object.\n                            if (this.map.isDefine && exports === undefined) {\n                                cjsModule = this.module;\n                                if (cjsModule) {\n                                    exports = cjsModule.exports;\n                                } else if (this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = this.map.isDefine ? [this.map.id] : null;\n                                err.requireType = this.map.isDefine ? 'define' : 'require';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                req.onResourceLoad(context, this.map, this.depMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        bundleId = getOwn(bundlesMap, this.map.id),\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    //If a paths config, then just load that file instead to\n                    //resolve the plugin, as it is built into that paths layer.\n                    if (bundleId) {\n                        this.map.url = context.nameToUrl(bundleId);\n                        this.load();\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                             'fromText eval for ' + id +\n                                            ' failed: ' + e,\n                                             e,\n                                             [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            if (this.undefed) {\n                                return;\n                            }\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', bind(this, this.errback));\n                        } else if (this.events.error) {\n                            // No direct errback on this module, but something\n                            // else is listening for errors, so be sure to\n                            // propagate the error correctly.\n                            on(depMap, 'error', bind(this, function(err) {\n                                this.emit('error', err);\n                            }));\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +\n                        args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                //Save off the paths since they require special processing,\n                //they are additive.\n                var shim = config.shim,\n                    objs = {\n                        paths: true,\n                        bundles: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (!config[prop]) {\n                            config[prop] = {};\n                        }\n                        mixin(config[prop], value, true, true);\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Reverse map the bundles\n                if (cfg.bundles) {\n                    eachProp(cfg.bundles, function (value, prop) {\n                        each(value, function (v) {\n                            if (v !== prop) {\n                                bundlesMap[v] = prop;\n                            }\n                        });\n                    });\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location, name;\n\n                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;\n\n                        name = pkgObj.name;\n                        location = pkgObj.location;\n                        if (location) {\n                            config.paths[name] = pkgObj.location;\n                        }\n\n                        //Save pointer to main module ID for pkg name.\n                        //Remove leading dot in main, so main paths are normalized,\n                        //and remove any trailing .js, since different package\n                        //envs have different conventions: some use a module name,\n                        //some use a file name.\n                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')\n                                     .replace(currDirRegExp, '')\n                                     .replace(jsSuffixRegExp, '');\n                    });\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id, null, true);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                        id +\n                                        '\" has not been loaded yet for context: ' +\n                                        contextName +\n                                        (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                                                relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        mod.undefed = true;\n                        removeScript(id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        //Clean queued defines too. Go backwards\n                        //in array so that the splices do not\n                        //mess up the iteration.\n                        eachReverse(defQueue, function(args, i) {\n                            if (args[0] === id) {\n                                defQueue.splice(i, 1);\n                            }\n                        });\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overridden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, syms, i, parentModule, url,\n                    parentPath, bundleId,\n                    pkgMain = getOwn(config.pkgs, moduleName);\n\n                if (pkgMain) {\n                    moduleName = pkgMain;\n                }\n\n                bundleId = getOwn(bundlesMap, moduleName);\n\n                if (bundleId) {\n                    return context.nameToUrl(bundleId, ext, skipExt);\n                }\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/^data\\:|\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs ? url +\n                                        ((url.indexOf('?') === -1 ? '?' : '&') +\n                                         config.urlArgs) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callback function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = defaultOnError;\n\n    /**\n     * Creates the node for the load command. Only used in browser envs.\n     */\n    req.createNode = function (config, moduleName, url) {\n        var node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n        node.type = config.scriptType || 'text/javascript';\n        node.charset = 'utf-8';\n        node.async = true;\n        return node;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = req.createNode(config, moduleName, url);\n            if (config.onNodeCreated) {\n                config.onNodeCreated(node, config, moduleName, url);\n            }\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/jrburke/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/jrburke/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation that a build has been done so that\n                //only one script needs to be loaded anyway. This may need to be\n                //reevaluated if other use cases become common.\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                                'importScripts failed for ' +\n                                    moduleName + ' at ' + url,\n                                e,\n                                [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser && !cfg.skipDataMain) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Preserve dataMain in case it is a path (i.e. contains '?')\n                mainScript = dataMain;\n\n                //Set final baseUrl if there is not already an explicit one.\n                if (!cfg.baseUrl) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = mainScript.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                }\n\n                //Strip off any trailing .js since mainScript is now\n                //like a module name.\n                mainScript = mainScript.replace(jsSuffixRegExp, '');\n\n                //If mainScript is still a path, fall back to dataMain\n                if (req.jsExtRegExp.test(mainScript)) {\n                    mainScript = dataMain;\n                }\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = null;\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps && isFunction(callback)) {\n            deps = [];\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, '')\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this));\n","/**\r\n * Observer\r\n */\r\ndefine(\r\n    function(){\r\n        /**\r\n         * @constructor\r\n         */\r\n        function Observer() {\r\n            this.subscribers = [];\r\n        }\r\n\r\n        /**\r\n         * Method for subscribing\r\n         * @param eventName\r\n         * @param callBack\r\n         */\r\n        Observer.prototype.on = function(eventName, callBack){\r\n            this.subscribers[eventName] = this.subscribers[eventName] || [];\r\n            this.subscribers[eventName].push(callBack);\r\n        };\r\n\r\n        /**\r\n         * Method for event triggering\r\n         * @param eventName\r\n         * @param data\r\n         */\r\n        Observer.prototype.trigger = function(eventName, data){\r\n            this.subscribers[eventName] &&\r\n            this.subscribers[eventName].forEach(\r\n                function(callBack) {\r\n                    callBack(data);\r\n                }\r\n            );\r\n        };\r\n\r\n        return Observer;\r\n    }\r\n);\r\n","define(['classes/Observer'],\r\n    function(Observer){\r\n        /**\r\n         * @param options\r\n         * @constructor\r\n         */\r\n        function Collection(options) {\r\n            Collection.prototype.constructor.apply(this);\r\n            options = options || {};\r\n            this.collection = options.collection || [];\r\n            this.collection.forEach(function(model){\r\n                model.on('remove', this.remove.bind(this));\r\n            }, this);\r\n        }\r\n\r\n        // Inheritance\r\n        Collection.prototype = Object.create(Observer.prototype);\r\n        Collection.prototype.constructor = Observer;\r\n\r\n        /**\r\n         * Add model to collection\r\n         * @param model\r\n         */\r\n        Collection.prototype.add = function(model){\r\n            this.collection.push(model);\r\n            model.on('remove', this.remove.bind(this));\r\n            this.trigger('changed', this);\r\n            this.trigger('add', model);\r\n        };\r\n\r\n        /**\r\n         * Remove model from collection\r\n         * @param model\r\n         */\r\n        Collection.prototype.remove = function(model) {\r\n            var modelIndex = this.collection.indexOf(model);\r\n\r\n            if (modelIndex > -1) {\r\n                this.collection.splice(modelIndex, 1);\r\n                this.trigger('changed', this);\r\n            }\r\n        };\r\n\r\n        return Collection;\r\n    }\r\n);\r\n","/**\r\n * View of one listy item\r\n */\r\ndefine(\r\n    function(){\r\n\r\n        /**\r\n         * @param options\r\n         * @constructor\r\n         */\r\n        function ListItemView(options) {\r\n            this.model = options.model;\r\n            this.el = options.el;\r\n        }\r\n\r\n        /**\r\n         * render list item and subscribes for removing it\r\n         * @returns {ListItemView}\r\n         */\r\n        ListItemView.prototype.render = function(){\r\n            this.el.innerHTML = this.model.text + ' <button class=\"delete\">Delete</button>';\r\n            this.el.querySelector('.delete').addEventListener('click', ListItemView.prototype.remove.bind(this));\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Removes list item\r\n         */\r\n        ListItemView.prototype.remove = function(){\r\n            this.el.remove();\r\n            this.model.remove();\r\n        };\r\n\r\n        return ListItemView;\r\n    }\r\n);\r\n","/**\r\n * View of list\r\n */\r\ndefine(['views/ListItem'],\r\n    function(listItem){\r\n\r\n        /**\r\n         * @param options\r\n         * @constructor\r\n         */\r\n        function ListView(options) {\r\n            this.listCollection = options.listCollection;\r\n            this.el = options.el;\r\n        }\r\n\r\n        /**\r\n         * Render\r\n         * @returns {ListView}\r\n         */\r\n        ListView.prototype.render = function(){\r\n            this.listCollection.collection.forEach(this.addNewItem.bind(this));\r\n            this.listCollection.on('add', this.addNewItem.bind(this));\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Add new item to a list\r\n         * @param model\r\n         */\r\n        ListView.prototype.addNewItem = function(model){\r\n            var listItemView = new listItem({\r\n                model: model,\r\n                el: document.createElement(\"li\")\r\n            });\r\n            this.el.appendChild(listItemView.render().el);\r\n        };\r\n\r\n        return ListView;\r\n    }\r\n);\r\n","/**\r\n * Model of one list item\r\n */\r\ndefine(['classes/Observer'],\r\n    function(Observer){\r\n\r\n        /**\r\n         * @param text\r\n         * @constructor\r\n         */\r\n        function List(text){\r\n            List.prototype.constructor.apply(this);\r\n            this.text = text || '';\r\n        }\r\n\r\n        /**\r\n         * Inheritance\r\n         */\r\n        List.prototype = Object.create(Observer.prototype);\r\n        List.prototype.constructor = Observer;\r\n\r\n        /**\r\n         * Remove one list item\r\n         */\r\n        List.prototype.remove = function() {\r\n            this.trigger('remove', this);\r\n            // remove from server\r\n        };\r\n\r\n        return List;\r\n    }\r\n);","/**\r\n * View of List Page\r\n */\r\ndefine(['views/List', 'models/List'],\r\n    function(ListView, ListModel){\r\n\r\n        /**\r\n         * @param options\r\n         * @constructor\r\n         */\r\n        function ListPageView(options) {\r\n            this.el = options.el;\r\n            this.listCollection = options.listCollection;\r\n        }\r\n\r\n        /**\r\n         * Render list page\r\n         * @returns {ListPageView}\r\n         */\r\n        ListPageView.prototype.render = function(){\r\n            // Render page skeleton\r\n            this.el.innerHTML = document.getElementById('list-page').innerHTML;\r\n\r\n            // Render message about list quantity\r\n            this.elementlistLength = this.el.querySelector('.list-length');\r\n            this.listCollection.on('changed', this.collectionChanged.bind(this));\r\n            this.collectionChanged();\r\n\r\n            // Init adding list item\r\n            this.elementNewItemText = this.el.querySelector('.new-item-text');\r\n            this.el.querySelector('.add-list-item').addEventListener('submit', this.addListItem.bind(this));\r\n\r\n            // Show list\r\n            var listView = new ListView({\r\n                listCollection: this.listCollection,\r\n                el: this.el.querySelector('.list')\r\n            });\r\n            listView.render();\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Render list quantity when collection is changed\r\n         */\r\n        ListPageView.prototype.collectionChanged = function(){\r\n            this.elementlistLength.textContent = this.listCollection.collection.length + ' items in list';\r\n        };\r\n\r\n        /**\r\n         * Add list item to collection\r\n         * @param e\r\n         */\r\n        ListPageView.prototype.addListItem = function(e){\r\n            e.preventDefault();\r\n            if (this.elementNewItemText.value){\r\n                this.listCollection.add(new ListModel(this.elementNewItemText.value));\r\n                this.elementNewItemText.value = \"\";\r\n            }\r\n        };\r\n\r\n        return ListPageView;\r\n    }\r\n);\r\n",null,"define(['classes/Collection', 'views/ListPage'],\r\n    function(Collection, ListPageView){\r\n\r\n        /**\r\n         * Create list collection and render view\r\n         */\r\n        function execute(){\r\n            this.listCollection = this.listCollection || new Collection();\r\n\r\n            (new ListPageView({\r\n                listCollection: this.listCollection,\r\n                el: document.querySelector('.content')\r\n            })).render();\r\n        }\r\n\r\n        return {\r\n            execute: execute\r\n        };\r\n    }\r\n);\r\n","define(['controllers/List'],\r\n    function (listController){\r\n        function init(){\r\n\r\n            // Router should be implemented here\r\n            // But we have only one controller. So execute it\r\n            listController.execute();\r\n        }\r\n\r\n        return {\r\n            init: init\r\n        };\r\n    }\r\n);\r\n","require(['App'], function(App){\r\n    App.init();\r\n});"],"sourceRoot":"/source/"}